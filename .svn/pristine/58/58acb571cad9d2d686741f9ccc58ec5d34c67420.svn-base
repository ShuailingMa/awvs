package msl.https;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URI;
import java.util.HashMap;
import java.util.Map;

import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.methods.RequestBuilder;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.conn.ssl.NoopHostnameVerifier;
import org.apache.http.conn.ssl.TrustAllStrategy;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContextBuilder;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

public class AwvsTest {
	private final static Logger logger = LoggerFactory.getLogger(AwvsTest.class);
	
	/**
	 * 模拟浏览器登录awvs,获取X-Auth
	 * @throws Exception
	 */
	@Test
	public void run1() throws Exception {

		// 构造访问https的client,TrustAllStrategy忽略证书校验，NoopHostnameVerifier忽略主机校验
		HttpClient httpClient = HttpClients.custom()
				.setSSLContext(new SSLContextBuilder().loadTrustMaterial(null, TrustAllStrategy.INSTANCE).build())
				.setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE).build();
		
		// 构造json参数，放入实体
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("email", "614236065@qq.com");
		map.put("password", "6f83b69310851ac6a5785d2557d929a549efa105e445030ea9bc7cbc225e71df");
		map.put("remember_me", false);
		map.put("logout_previous", true);
		String json = JSON.toJSONString(map);
		HttpEntity entity = new StringEntity(json, ContentType.APPLICATION_JSON) ;
		
		// 构造请求路径，并访问
		URI uri = new URIBuilder().setScheme("https").setHost("192.168.93.1").setPort(3443).setPath("/api/v1/me/login").build();
		HttpUriRequest request = RequestBuilder.create("post").setEntity(entity).setUri(uri).build();
		HttpResponse response = httpClient.execute(request);
		
		// 解析获取的数据
		Header[] headers = response.getHeaders("X-Auth");
		for (Header header : headers) {
			System.out.println(header.getValue());
		}
	}
	
	
	/**
	 * 根据X-Auth获取targets
	 * @throws Exception
	 */
	@Test
	public void run2() throws Exception {

		// 构造访问https的client,TrustAllStrategy忽略证书校验，NoopHostnameVerifier忽略主机校验
		HttpClient httpClient = HttpClients.custom()
				.setSSLContext(new SSLContextBuilder().loadTrustMaterial(null, TrustAllStrategy.INSTANCE).build())
				.setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE).build();
		
		// 构造json参数，放入实体
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("email", "614236065@qq.com");
		map.put("password", "6f83b69310851ac6a5785d2557d929a549efa105e445030ea9bc7cbc225e71df");
		map.put("remember_me", false);
		map.put("logout_previous", true);
		String json = JSON.toJSONString(map);
		HttpEntity entity = new StringEntity(json, ContentType.APPLICATION_JSON) ;
		
		// 构造请求路径，并访问
		URI uri = new URIBuilder().setScheme("https").setHost("192.168.93.1").setPort(3443).setPath("/api/v1/me/login").build();
		HttpUriRequest request = RequestBuilder.create("post").setEntity(entity).setUri(uri).build();
		HttpResponse response = httpClient.execute(request);
		
		// 解析获取的数据
		Header[] headers = response.getHeaders("X-Auth");
		Header xAuth = headers[0];		// X-Auth值
		
		System.out.println("开始第二次访问");
		
		// 再次访问
		URI uri2 = new URIBuilder().setScheme("https").setHost("192.168.93.1").setPort(3443).setPath("/api/v1/targets").build();
		HttpGet httpGet = new HttpGet(uri2);		
		httpGet.addHeader(xAuth);
		HttpResponse response2 = httpClient.execute(httpGet);

		// 输出结果
		System.out.println(response2.getStatusLine());
		Header[] allHeaders = response2.getAllHeaders();
		for (Header header : allHeaders) {
			System.out.println(header);
		}
		
		InputStream content = response2.getEntity().getContent();
		BufferedReader br = new BufferedReader(new InputStreamReader(content));
		String line = null;
		while((line = br.readLine()) != null) {
			System.out.println(line);
		}
		
	}
	
	/**
	 * 根据X-Auth添加targets
	 * @throws Exception
	 */
	@Test
	public void run3() throws Exception {

		logger.info("开始登录>>...");
		
		// 构造访问https的client,TrustAllStrategy忽略证书校验，NoopHostnameVerifier忽略主机校验
		HttpClient httpClient = HttpClients.custom()
				.setSSLContext(new SSLContextBuilder().loadTrustMaterial(null, TrustAllStrategy.INSTANCE).build())
				.setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE).build();
		
		// 构造json参数，放入实体
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("email", "614236065@qq.com");
		map.put("password", "6f83b69310851ac6a5785d2557d929a549efa105e445030ea9bc7cbc225e71df");
		map.put("remember_me", false);
		map.put("logout_previous", true);
		String json = JSON.toJSONString(map);
		HttpEntity entity = new StringEntity(json, ContentType.APPLICATION_JSON) ;
		
		// 构造请求路径，并访问
		URI uri = new URIBuilder().setScheme("https").setHost("192.168.93.1").setPort(3443).setPath("/api/v1/me/login").build();
		HttpUriRequest request = RequestBuilder.create("post").setEntity(entity).setUri(uri).build();
		HttpResponse response = httpClient.execute(request);
		
		// 解析获取的数据
		Header[] headers = response.getHeaders("X-Auth");
		Header xAuth = headers[0];		// X-Auth值
		logger.info("登录成功并获取到{}", xAuth);
		
		
		// 再次访问
		logger.info("开始添加targets");
		URI uri2 = new URIBuilder().setScheme("https").setHost("192.168.93.1").setPort(3443).setPath("/api/v1/targets").build();
		HttpPost httpPost = new HttpPost(uri2);		
		httpPost.addHeader(xAuth);
		
		Map<String, String> map2 = new HashMap<String, String>();
		map2.put("address", "https://www.zto.com/");
		map2.put("description", "zol");
		map2.put("criticality", "10");
		String json2 = JSON.toJSONString(map2);
		HttpEntity entity2 = new StringEntity(json2, ContentType.APPLICATION_JSON);
		httpPost.setEntity(entity2);
		HttpResponse response2 = httpClient.execute(httpPost);

		StringBuffer sb = new StringBuffer();
		InputStream content = response2.getEntity().getContent();
		BufferedReader br = new BufferedReader(new InputStreamReader(content));
		String line = null;
		while((line = br.readLine()) != null) {
			//System.out.println(line);
			sb.append(line);
		}
		
		String tar = sb.toString();
		
		JSONObject jsonObject = JSON.parseObject(tar);
		String target_id = jsonObject.getString("target_id");
		logger.info("当前targets的id是{}", target_id);
		
		logger.info("准备扫描当前站点");
		StringBuffer sb2 = new StringBuffer();
		String tar2 = sb2.append("{\"target_id\":").append(target_id).append("\",\"profile_id\":\"11111111-1111-1111-1111-111111111111\",\"schedule\":{\"disable\":false,\"start_date\":null,\"time_sensitive\":false},\"ui_session_id\":\"d8bc36af08b2bba72b98274a8af2be08\"}").toString();
		
		URI uri3 = new URIBuilder().setScheme("https").setHost("192.168.93.1").setPort(3443).setPath("/api/v1/scans").build();
		HttpPost httpPost3 = new HttpPost(uri3); 
		httpPost3.setEntity(new StringEntity(tar2,ContentType.APPLICATION_JSON));
		
		HttpResponse response3 = httpClient.execute(httpPost3);
		
		// 输出结果
		logger.info("扫描操作结果：{}", response3.getStatusLine());
		
	}
}
